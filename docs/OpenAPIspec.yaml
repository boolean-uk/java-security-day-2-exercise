openapi: 3.0.0
info:
  title: Library Management API
  version: 1.0.0
  description: API for managing library items, user borrows, and authentication.
servers:
  - url: http://localhost:4000
paths:
  /items/{itemId}/users/{userId}:
    post:
      summary: Borrow an item for a user
      tags:
        - borrows
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '201':
          description: Borrow operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BorrowResponse'
    put:
      summary: Return an item for a user
      tags:
        - borrows
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties: {}
      responses:
        '201':
          description: Return operation successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReturnResponse'
  /users/{userId}/borrows:
    get:
      summary: Get all borrows for a user
      tags:
        - borrows
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: No user with that id found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /items/{itemId}:
    put:
      summary: Update item details
      tags:
        - items
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemInput'
      responses:
        '201':
          description: Item updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
    delete:
      summary: Delete an item
      tags:
        - items
      parameters:
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
      responses:
        '404':
          description: No item with that id found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /items:
    get:
      summary: Get all items
      tags:
        - items
      responses:
        '200':
          description: A list of items
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Item'
    post:
      summary: Create a new item
      tags:
        - items
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ItemInput'
      responses:
        '201':
          description: Item created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Item'
  /auth/signup:
    post:
      summary: User signup
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthSignup'
      responses:
        '200':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
  /auth/signin:
    post:
      summary: User signin
      tags:
        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthSignin'
      responses:
        '200':
          description: Signin successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthToken'
components:
  schemas:
    Error:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            message:
              type: string
    Item:
      type: object
      properties:
        id:
          type: integer
        title:
          type: string
        type:
          type: string
        genre:
          type: string
        isBorrowed:
          type: boolean
    ItemInput:
      type: object
      properties:
        title:
          type: string
        type:
          type: string
        genre:
          type: string
        isBorrowed:
          type: boolean
    BorrowResponse:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            id:
              type: integer
            borrowDate:
              type: string
            returnDate:
              type: string
            item:
              $ref: '#/components/schemas/Item'
            user:
              type: object
              properties:
                username:
                  type: string
    ReturnResponse:
      allOf:
        - $ref: '#/components/schemas/BorrowResponse'
    AuthSignup:
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          type: string
        role:
          type: array
          items:
            type: string
    AuthSignin:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
    AuthToken:
      type: object
      properties:
        token:
          type: string
        type:
          type: string
        id:
          type: integer
        username:
          type: string
        email:
          type: string
        roles:
          type: array
          items:
            type: string
